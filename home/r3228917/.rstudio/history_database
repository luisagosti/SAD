1748882825212:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748882877488:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748882966760:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748883039529:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748883133343:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748883150901:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748883200440:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748883224888:source("/cloud/project/scripts/3_EDA_SQL.R.R", echo=TRUE)
1748883539623:source("/cloud/project/scripts/3_EDA_SQL.R.R", echo=TRUE)
1748883552971:source("/cloud/project/scripts/3_EDA_SQL.R.R", echo=TRUE)
1748883596345:source("/cloud/project/scripts/3_EDA_SQL.R.R", echo=TRUE)
1748883752926:source("/cloud/project/scripts/3_EDA_SQL.R.R", echo=TRUE)
1748883783256:source("/cloud/project/scripts/3_EDA_SQL.R.R", echo=TRUE)
1748884031288:git
1748884869765:# 14. Tarefa 11: Cidades com número de bikes entre 15000 e 20000
1748884869766:res11 <- dbGetQuery(con, "
1748884869766:SELECT b.city, b.country,
1748884869766:w.lat, w.lng, w.population
1748884869767:FROM bike_systems b
1748884869767:JOIN worldcities w
1748884869767:ON LOWER(b.city) = LOWER(w.city)
1748884869767:AND LOWER(b.country) = LOWER(w.country)
1748884869767:WHERE b.discontinued IS NULL -- sistemas ativos
1748884869768:ORDER BY b.city;
1748884869768:")
1748884897910:p8 <- t8_plot %>%
1748884897911:ggplot(aes(x = season, y = media_alug)) +
1748884897911:geom_col(fill = "skyblue") +
1748884897911:geom_errorbar(aes(ymin = min_alug, ymax = max_alug), width = 0.2) +
1748884897911:geom_point(aes(y = sd_alug), color = "red", size = 3) +
1748884897912:labs(
1748884897912:title = "Média, Mínimo, Máximo e Desvio Padrão de Aluguéis por Estação",
1748884897912:x = "Estação",
1748884897912:y = "Aluguéis (média ± erro; ponto vermelho = desvio padrão)"
1748884897913:) +
1748884897913:theme_minimal()
1748885157634:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1748885541950:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1748885687073:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1748886550012:# ----------------------------------------------------------------------------
1748886550013:# 2.2. World Cities (raw_worldcities.csv)
1748886550013:# ----------------------------------------------------------------------------
1748886550013:wc_raw <- read_csv("data_raw/raw_worldcities.csv")
1748886649185:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748886699260:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748886952578:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887150092:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887273967:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887322272:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887513642:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887598443:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887720148:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887799478:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748887941379:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748891880969:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1748892080645:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1748892353196:source("scripts/3_EDA_SQL.R", echo = TRUE)
1748892420753:source("scripts/3_EDA_SQL.R", echo = TRUE)
1749224774561:# Tarefa 10 - Total de bicicletas e informações de Seul (join bike_systems + worldcities)
1749224774569:t10 <- dbGetQuery(con, "
1749224774570:SELECT b.city AS city_bike,
1749224774570:b.country AS country_bike,
1749224774570:b.number_of_bikes,
1749224774570:w.city AS city_world,
1749224774571:w.country AS country_world,
1749224774571:w.lat,
1749224774571:w.lng,
1749224774571:w.population
1749224774571:FROM bike_systems b
1749224774572:JOIN worldcities w
1749224774572:ON LOWER(b.city) = LOWER(w.city)
1749224774572:AND LOWER(b.country) = LOWER(w.country)
1749224774572:WHERE LOWER(b.city) = 'seoul'
1749224774572:AND LOWER(b.country) = 'south korea';
1749224774573:")
1749224783993:# Tarefa 11 - Cidades com escala de bicicletas entre 15000 e 20000
1749224783993:t11 <- dbGetQuery(con, "
1749224783994:SELECT b.city,
1749224783994:b.country,
1749224783994:b.number_of_bikes,
1749224783994:w.lat,
1749224783994:w.lng,
1749224783995:w.population
1749224783995:FROM bike_systems b
1749224783995:JOIN worldcities w
1749224783995:ON LOWER(b.city) = LOWER(w.city)
1749224783995:AND LOWER(b.country) = LOWER(w.country)
1749224783996:WHERE b.number_of_bikes BETWEEN 15000 AND 20000
1749224783996:ORDER BY b.number_of_bikes DESC;
1749224783996:")
1749226760401:# Desconectar após consultas
1749226760408:dbDisconnect(con)
1749226765659:# 15. Fechar conexão
1749226765659:dbDisconnect(con)
1749226769026:# ------------------------------------------------------------------------------------
1749226769026:# Fim do script de limpeza/disputa
1749226769026:# ------------------------------------------------------------------------------------
1749226784778:# ------------------------------------------------------------------------------------
1749226784778:# 4. Exibir rapidamente no console (opcional)
1749226784778:# ------------------------------------------------------------------------------------
1749226784778:print("=== Tarefa 1 ==="); print(t1)
1749226799766:print("=== Tarefa 2 ==="); print(t2)
1749226803275:# ------------------------------------------------------------------------------------
1749226803275:# Fim do script de limpeza/disputa
1749226803275:# ------------------------------------------------------------------------------------
1749226818815:print("=== Tarefa 3 ==="); print(t3)
1749226831320:# ---- Plot para Tarefa 7: Top 10 season+hour por alugueis médios ----
1749226831321:# Usar t7 para gráfico de barras horizontais
1749226831321:p7 <- t7 %>%
1749226831321:mutate(season_hour = paste0(season, " - ", hour)) %>%
1749226831321:arrange(alugueis_medios) %>%
1749226831321:ggplot(aes(x = alugueis_medios, y = fct_reorder(season_hour, alugueis_medios))) +
1749226831322:geom_col(fill = "steelblue") +
1749226831322:labs(
1749226831322:title = "Top 10 combinações Estação + Hora por Média de Aluguéis",
1749226831322:x = "Aluguéis Médios",
1749226831323:y = "Estação - Hora"
1749226831323:) +
1749226831323:theme_minimal()
1749226843648:ggsave("figures/tarefa07_top10_season_hour.png", p7, width = 8, height = 5)
1749226874312:No
1749226920542:# ---- Plot para Tarefa 8: Estatísticas de alugueis por estação ----
1749226920542:# Mostrar média + barras de erro (min/max) - e então um ponto para desvio padrão
1749226920543:# Criar data frame com média, min, max, sd a partir de t8
1749226920543:t8_plot <- t8 %>%
1749226920543:rename(
1749226920544:media_alug = media,
1749226920544:min_alug = minimo,
1749226920544:max_alug = maximo,
1749226920545:sd_alug = desvio_padrao
1749226920545:)
1749226967742:# 2. Diretórios de entrada/saída
1749226967743:dir.create("data_raw", showWarnings = FALSE)
1749226975836:# 3. Coleta da tabela de Bike Sharing Systems da Wikipedia
1749226975836:url_bike_systems <- "https://en.wikipedia.org/wiki/List_of_bicycle-sharing_systems"
1749226979733:# ------------------------------------------------------------------------------------
1749226979734:# Fim do script de limpeza/disputa
1749226979734:# ------------------------------------------------------------------------------------
1749226987080:p8 <- t8_plot %>%
1749226987080:ggplot(aes(x = season, y = media_alug)) +
1749226987081:geom_col(fill = "skyblue") +
1749226987081:geom_errorbar(aes(ymin = min_alug, ymax = max_alug), width = 0.2) +
1749226987081:geom_point(aes(y = sd_alug), color = "red", size = 3) +
1749226987081:labs(
1749226987082:title = "Média, Mínimo, Máximo e Desvio Padrão de Aluguéis por Estação",
1749226987082:x = "Estação",
1749226987082:y = "Aluguéis (média ± erro; ponto vermelho = desvio padrão)"
1749226987082:) +
1749226987082:theme_minimal()
1749227140637:# ====================================================================================
1749227140637:# File: scripts/4_EDA_ggplot.R
1749227140637:# Description: Análise exploratória com SQL (DBI) e visualizações com ggplot2
1749227140638:# ====================================================================================
1749227140638:# 1. Carregar pacotes necessários
1749227140638:library(DBI)
1749227140639:library(RSQLite)
1749227140639:library(tidyverse)
1749227140639:library(lubridate)
1749227140640:# 2. Conectar ao banco SQLite previamente criado em scripts/3_EDA_SQL.R
1749227140640:con <- dbConnect(RSQLite::SQLite(), "projeto_sad.sqlite")
1749227140775:# ------------------------------------------------------------------------------------
1749227140775:# 3. Executar consultas SQL para as Tarefas 1–11 e armazenar resultados em data frames
1749227140775:# ------------------------------------------------------------------------------------
1749227140775:# Tarefa 1 - Contagem de Registos no conjunto seoul_bike_sharing
1749227140776:t1 <- dbGetQuery(con, "
1749227140776:SELECT COUNT(*) AS total_registros
1749227140776:FROM seoul_bike;
1749227140776:")
1749227140864:# Tarefa 2 - Horas com rented_bike_count ≠ 0
1749227140864:t2 <- dbGetQuery(con, "
1749227140864:SELECT COUNT(*) AS horas_com_aluguel
1749227140864:FROM seoul_bike
1749227140864:WHERE rented_bike_count > 0;
1749227140865:")
1749227140866:# Tarefa 3 - Previsão do tempo para Seul nas próximas 3 horas
1749227140866:t3 <- dbGetQuery(con, "
1749227140867:SELECT *
1749227140867:FROM cities_weather
1749227140867:WHERE city LIKE 'Seoul%'
1749227140867:ORDER BY datetime
1749227140867:LIMIT 1;
1749227140868:")
1749227140882:# Tarefa 4 - Estações incluídas no conjunto seoul_bike
1749227140882:t4 <- dbGetQuery(con, "
1749227140882:SELECT DISTINCT season
1749227140882:FROM seoul_bike;
1749227140882:")
1749227140884:# Tarefa 5 - Primeira e última data no conjunto seoul_bike
1749227140884:t5 <- dbGetQuery(con, "
1749227140884:SELECT MIN(date) AS primeira_data,
1749227140885:MAX(date) AS ultima_data
1749227140885:FROM seoul_bike;
1749227140885:")
1749227140886:# Tarefa 6 - Data/hora com máximo histórico de alugueis
1749227140886:t6 <- dbGetQuery(con, "
1749227140887:SELECT date, hour, rented_bike_count
1749227140887:FROM seoul_bike
1749227140887:WHERE rented_bike_count = (
1749227140887:SELECT MAX(rented_bike_count) FROM seoul_bike
1749227140887:);
1749227140887:")
1749227140889:# Tarefa 7 - Top 10 combinações estação+hora por média de alugueis e temperatura média
1749227140889:t7 <- dbGetQuery(con, "
1749227140889:SELECT season,
1749227140889:hour,
1749227140890:ROUND(AVG(temperature), 2) AS temp_media,
1749227140890:ROUND(AVG(rented_bike_count), 2) AS alugueis_medios
1749227140890:FROM seoul_bike
1749227140890:GROUP BY season, hour
1749227140890:ORDER BY alugueis_medios DESC
1749227140891:LIMIT 10;
1749227140891:")
1749227140895:# Tarefa 8 - Estatísticas sazonalidade de alugueis (média, min, max, desvio padrão)
1749227140895:t8 <- dbGetQuery(con, "
1749227140896:SELECT season,
1749227140896:ROUND(AVG(rented_bike_count), 2) AS media,
1749227140896:MIN(rented_bike_count) AS minimo,
1749227140896:MAX(rented_bike_count) AS maximo,
1749227140896:ROUND(
1749227140896:SQRT(
1749227140897:AVG(rented_bike_count * rented_bike_count)
1749227140897:- AVG(rented_bike_count) * AVG(rented_bike_count)
1749227140897:), 2
1749227140897:) AS desvio_padrao
1749227140897:FROM seoul_bike
1749227140898:GROUP BY season;
1749227140898:")
1749227140901:# Tarefa 9 - Métricas meteorológicas médias e alugueis médios por estação
1749227140901:t9 <- dbGetQuery(con, "
1749227140901:SELECT season,
1749227140901:ROUND(AVG(temperature), 2)       AS temp_media,
1749227140902:ROUND(AVG(humidity), 2)          AS hum_media,
1749227140902:ROUND(AVG(wind_speed), 2)        AS vento_media,
1749227140902:ROUND(AVG(visibility), 2)        AS vis_media,
1749227140902:ROUND(AVG(dew_point_temperature), 2) AS dew_media,
1749227140902:ROUND(AVG(solar_radiation), 2)   AS solar_media,
1749227140903:ROUND(AVG(precipitation), 2)     AS precip_media,   -- em vez de rainfall
1749227140903:ROUND(AVG(snow_fall), 2)         AS neve_media,     -- em vez de snowfall
1749227140903:ROUND(AVG(rented_bike_count), 2) AS alugueis_media
1749227140903:FROM seoul_bike
1749227140903:GROUP BY season
1749227140903:ORDER BY alugueis_media DESC;
1749227140904:")
1749227140909:# Confira os campos (colunas) da tabela bike_systems
1749227140909:dbListFields(con, "bike_systems")
1749227140912:# Tarefa 10 - Total de bicicletas e informações de Seul (join bike_systems + worldcities)
1749227140912:t10 <- dbGetQuery(con, "
1749227140913:SELECT b.city AS city_bike,
1749227140913:b.country AS country_bike,
1749227140913:b.number_of_bikes,
1749227140913:w.city AS city_world,
1749227140913:w.country AS country_world,
1749227140914:w.lat,
1749227140914:w.lng,
1749227140914:w.population
1749227140914:FROM bike_systems b
1749227140914:JOIN worldcities w
1749227140914:ON LOWER(b.city) = LOWER(w.city)
1749227140915:AND LOWER(b.country) = LOWER(w.country)
1749227140915:WHERE LOWER(b.city) = 'seoul'
1749227140915:AND LOWER(b.country) = 'south korea';
1749227140915:")
1749312646203:page <- read_html(url_bike_systems)
1749312657956:bike_table <- page %>%
1749312657956:html_node("table.wikitable") %>%
1749312657956:html_table(fill = TRUE)
1749312733208:write_csv(bike_table, "data_raw/raw_bike_sharing_systems.csv")
1749312745126:# ------------------------------------------------------------------------------------
1749312745126:# Fim do script de limpeza/disputa
1749312745126:# ------------------------------------------------------------------------------------
1749312759863:message(" - tarefa11_cidades_15000_20000.png")
1749313273145:# ====================================================================================
1749313273145:# File: scripts/1_coleta_dados.R
1749313273145:# Description: Coleta de dados raw para o projeto
1749313273146:# ====================================================================================
1749313273146:# 1. Carregar pacotes necessários
1749313273146:library(rvest)
1749313273191:library(tidyverse)
1749313273192:library(httr)
1749313273196:library(jsonlite)
1749313273216:# 2. Diretórios de entrada/saída
1749313273216:dir.create("data_raw", showWarnings = FALSE)
1749313273216:# 3. Coleta da tabela de Bike Sharing Systems da Wikipedia
1749313273217:url_bike_systems <- "https://en.wikipedia.org/wiki/List_of_bicycle-sharing_systems"
1749313273217:page <- read_html(url_bike_systems)
1749313273395:bike_table <- page %>%
1749313273395:html_node("table.wikitable") %>%
1749313273395:html_table(fill = TRUE)
1749313273648:write_csv(bike_table, "data_raw/raw_bike_sharing_systems.csv")
1749313273912:# 4. Importação manual do arquivo World Cities
1749313273912:# OBSERVAÇÃO: Baixe manualmente o CSV de SimpleMaps (ou outra fonte) e salve como:
1749313273912:# data_raw/raw_worldcities.csv
1749313273913:# Para referência, deixamos um stub para leitura caso já exista:
1749313273913:if (file.exists("data_raw/raw_worldcities.csv")) {
1749313273913:message("raw_worldcities.csv encontrado em data_raw/.")
1749313273913:} else {
1749313273913:message("⚠️ Coloque raw_worldcities.csv (SimpleMaps ou similar) em data_raw/.")
1749313273914:}
1749313273915:# 5. Coleta de previsão do tempo via OpenWeather API
1749313273915:#    – Defina sua API key abaixo (crie conta grátis em openweathermap.org)
1749313273915:api_key <- "2810b3593651a930239d07e75e3409f7"  # substitua pela sua chave real
1749313273915:# Lista de cidades desejadas (formato: "Cidade,País")
1749313273916:cidades <- c("Seoul,KR", "New York,US", "Paris,FR", "Suzhou,CN", "London,UK")
1749313273916:get_forecast <- function(city) {
1749313273916:url <- paste0(
1749313273916:"https://api.openweathermap.org/data/2.5/forecast?q=",
1749313273917:URLencode(city),
1749313273917:"&units=metric&appid=", api_key
1749313273917:)
1749313273917:resp <- GET(url)
1749313273917:data <- fromJSON(rawToChar(resp$content), flatten = TRUE)
1749313273918:df <- data$list %>%
1749313273918:as_tibble() %>%
1749313273918:select(
1749313273918:dt_txt,
1749313273919:main.temp, main.humidity,
1749313273919:wind.speed, visibility,
1749313273919:clouds.all,
1749313273919:weather
1749313273919:) %>%
1749313273948:mutate(city = city)
1749313273949:return(df)
1749313273949:}
1749313273949:all_forecasts <- map_dfr(cidades, get_forecast)
1749313274205:write_csv(all_forecasts, "data_raw/raw_cities_weather_forecast.csv")
1749313274229:# 6. Importação manual do dataset Seoul Bike Sharing
1749313274229:# OBSERVAÇÃO: Baixe manualmente de https://www.kaggle.com/datasets/rtgacusan/seoul-bike-sharing-demand
1749313274229:# e salve como data_raw/raw_seoul_bike_sharing.csv
1749313274229:if (file.exists("data_raw/raw_seoul_bike_sharing.csv")) {
1749313274230:message("raw_seoul_bike_sharing.csv encontrado em data_raw/.")
1749313274230:} else {
1749313274230:message("⚠️ Coloque raw_seoul_bike_sharing.csv em data_raw/.")
1749313274230:}
1749313288100:# 6. Importação manual do dataset Seoul Bike Sharing
1749313288100:# OBSERVAÇÃO: Baixe manualmente de https://www.kaggle.com/datasets/rtgacusan/seoul-bike-sharing-demand
1749313288100:# e salve como data_raw/raw_seoul_bike_sharing.csv
1749313288101:if (file.exists("data_raw/raw_seoul_bike_sharing.csv")) {
1749313288101:message("raw_seoul_bike_sharing.csv encontrado em data_raw/.")
1749313288101:} else {
1749313288101:message("⚠️ Coloque raw_seoul_bike_sharing.csv em data_raw/.")
1749313288102:}
1749313300860:ok
1749313589517:print(">>> Iniciando coleta de dados brutos...")
1749313604855:# ------------------------------------------------------------------------------------
1749313604855:# Fim do script de limpeza/disputa
1749313604856:# ------------------------------------------------------------------------------------
1749313698740:getwd()
1749313698741:list.files()
1749313755785:# ------------------------------------------------------------------------------------
1749313755786:# Fim do script de limpeza/disputa
1749313755786:# ------------------------------------------------------------------------------------
1749313809553:print(">>> Iniciando coleta de dados brutos...")
1749313824389:print(">>> Iniciando coleta de dados brutos...")
1749313873035:source("/cloud/project/scripts/1_coleta_dados.R", echo=TRUE)
1749313888408:source("/cloud/project/scripts/2_limpeza_disputa.R", echo=TRUE)
1749313896860:source("/cloud/project/scripts/3_EDA_SQL.R.R", echo=TRUE)
1749313911914:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915644656:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915744273:# Tarefa 10 - Total de bicicletas e informações de Seul (join bike_systems + worldcities)
1749915744273:t10 <- dbGetQuery(con, "
1749915744273:SELECT b.city AS city_bike,
1749915744274:b.country AS country_bike,
1749915744274:b.number_of_bikes,
1749915744274:w.city AS city_world,
1749915744274:w.country AS country_world,
1749915744275:w.lat,
1749915744275:w.lng,
1749915744275:w.population
1749915744275:FROM bike_systems b
1749915744275:JOIN worldcities w
1749915744276:ON LOWER(b.city) = LOWER(w.city)
1749915744276:AND LOWER(b.country) = LOWER(w.country)
1749915744276:WHERE LOWER(b.city) = 'seoul'
1749915744276:AND LOWER(b.country) = 'south korea';
1749915744277:")
1749915860628:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915887626:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915894795:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915900822:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915912812:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915943241:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915950784:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749915958506:clear
1749915959856:cls
1749915973668:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916132464:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916160715:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916184987:dbListTables(con)
1749916211490:dbGetQuery(con, "SELECT * FROM bike_systems_clean LIMIT 10")
1749916215873:dbGetQuery(con, "SELECT * FROM bike_systems LIMIT 10")
1749916230407:dbGetQuery(con, "SELECT * FROM bike_systems LIMIT 10")
1749916290511:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916316288:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916352562:dbListFields(con, "bike_systems")
1749916383786:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916424742:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916438638:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916479832:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916499027:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916540755:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916549846:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916569298:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916605491:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916612973:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916639362:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916659689:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916706124:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916767646:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916832822:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916909556:# Tarefa 11 - Cidades com escala de bicicletas entre 15000 e 20000
1749916909556:t11 <- dbGetQuery(con, "
1749916909556:SELECT b.city,
1749916909557:b.country,
1749916909557:b.number_of_bikes,
1749916909557:w.lat,
1749916909557:w.lng,
1749916909558:w.population
1749916909558:FROM bike_systems_clean b
1749916909558:JOIN worldcities w
1749916909558:ON LOWER(b.city) = LOWER(w.city)
1749916909559:AND LOWER(b.country) = LOWER(w.country)
1749916909559:WHERE b.number_of_bikes BETWEEN 15000 AND 20000
1749916909559:ORDER BY b.number_of_bikes DESC;
1749916909559:")
1749916975504:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749916992146:# Tarefa 11 - Cidades com escala de bicicletas entre 15000 e 20000
1749916992147:t11 <- dbGetQuery(con, "
1749916992147:SELECT b.city,
1749916992147:b.country,
1749916992147:b.number_of_bikes,
1749916992148:w.lat,
1749916992148:w.lng,
1749916992148:w.population
1749916992148:FROM bike_systems b
1749916992149:JOIN worldcities w
1749916992149:ON LOWER(b.city) = LOWER(w.city)
1749916992149:AND LOWER(b.country) = LOWER(w.country)
1749916992149:WHERE b.number_of_bikes BETWEEN 15000 AND 20000
1749916992150:ORDER BY b.number_of_bikes DESC;
1749916992150:")
1749917026087:dbGetQuery(con, "PRAGMA table_info(bike_systems);")
1749917109604:# Listar todas as tabelas
1749917109604:dbGetQuery(con, "SELECT name FROM sqlite_master WHERE type='table';")
1749917118806:dbGetQuery(con, "PRAGMA table_info(nome_da_tabela);")
1749917135605:dbGetQuery(con, "PRAGMA table_info(seoul_bike);")
1749917135609:dbGetQuery(con, "PRAGMA table_info(bike_systems_clean);")
1749917135611:dbGetQuery(con, "PRAGMA table_info(cities_weather);")
1749917182576:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917199161:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917203235:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917212160:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917232550:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917270548:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917295109:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917335023:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917389149:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917485014:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917499589:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917559879:source("/cloud/project/scripts/4_EDA_ggplot.R", echo=TRUE)
1749917609904:source("/cloud/project/scripts/5_modelagem.R", echo=TRUE)
1749917638930:fit_meteo_linear <- readRDS("/cloud/project/models/fit_meteo_linear.rds")
1749917758967:install.packages("glmnet")
1749917768708:source("/cloud/project/scripts/5_modelagem.R", echo=TRUE)
1749917801083:source("/cloud/project/scripts/5_modelagem.R", echo=TRUE)
1749917840120:source("/cloud/project/scripts/5_modelagem.R", echo=TRUE)
1749917875365:library(car)
1749917899069:vif(fit_meteo$fit)
1749917913713:predict(fit_meteo$fit, newdata = new_data, rankdeficient = "NA")
1749918163133:source("/cloud/project/scripts/5_modelagem.R", echo=TRUE)
1749918177269:install(car)
1749918205561:library(car)
1749918269732:source("/cloud/project/scripts/5_modelagem.R", echo=TRUE)
1749918309379:library(shiny); runApp('scripts/6_shiny_dashboard.R')
1749918371901:getwd()
1749918381613:runApp('scripts/6_shiny_dashboard.R')
1749918399538:fit_glmnet_final <- readRDS("/cloud/project/models/fit_glmnet_final.rds")
1749918437859:runApp('scripts/6_shiny_dashboard.R')
1749918503057:print(data$list[[1]])
1749918506160:print(data$list[[1]])
1749918511088:str(data$list)
1749918541197:runApp('scripts/6_shiny_dashboard.R')
1749918571356:runApp('scripts/6_shiny_dashboard.R')
1749918579800:runApp('scripts/6_shiny_dashboard.R')
1749918639144:runApp('scripts/6_shiny_dashboard.R')
1749918687729:runApp('scripts/6_shiny_dashboard.R')
1749918733382:runApp('scripts/6_shiny_dashboard.R')
1749918758521:runApp('scripts/6_shiny_dashboard.R')
